// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftbinatorHealthcare.Models;

namespace SoftbinatorHealthcare.Migrations
{
    [DbContext(typeof(HealthcareContext))]
    partial class HealthcareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Entities.Doctor", b =>
                {
                    b.Property<long>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<long>("Sallary")
                        .HasColumnType("bigint");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorID = 1L,
                            FirstName = "Mihnea",
                            LastName = "Vasilescu",
                            Sallary = 6000L
                        },
                        new
                        {
                            DoctorID = 2L,
                            FirstName = "Laura",
                            LastName = "Hancu",
                            Sallary = 9000L
                        },
                        new
                        {
                            DoctorID = 3L,
                            FirstName = "Alex",
                            LastName = "Matei",
                            Sallary = 11000L
                        },
                        new
                        {
                            DoctorID = 4L,
                            FirstName = "Theodor",
                            LastName = "Badea",
                            Sallary = 8600L
                        });
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Entities.DoctorPacient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorID")
                        .HasColumnType("bigint");

                    b.Property<long>("PacientID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PacientID");

                    b.ToTable("DoctorPacients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DoctorID = 1L,
                            PacientID = 1L
                        },
                        new
                        {
                            ID = 2,
                            DoctorID = 1L,
                            PacientID = 2L
                        },
                        new
                        {
                            ID = 3,
                            DoctorID = 2L,
                            PacientID = 2L
                        },
                        new
                        {
                            ID = 4,
                            DoctorID = 3L,
                            PacientID = 4L
                        });
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Models.Disease", b =>
                {
                    b.Property<long>("DiseaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiseaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptom1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptom2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptom3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptom4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptom5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiseaseID");

                    b.ToTable("Diseases");

                    b.HasData(
                        new
                        {
                            DiseaseID = 1L,
                            DiseaseName = "Tuberculosis",
                            DiseaseType = "Respiratory",
                            RiskFactor = "High",
                            Symptom1 = "cough",
                            Symptom2 = "fever",
                            Symptom3 = "chills",
                            Symptom4 = "night sweats",
                            Symptom5 = "loss of apetite"
                        },
                        new
                        {
                            DiseaseID = 2L,
                            DiseaseName = "Alzheimer",
                            DiseaseType = "Mental",
                            RiskFactor = "High",
                            Symptom1 = "memory problems",
                            Symptom2 = "increased confusion",
                            Symptom3 = "reduced concentration",
                            Symptom4 = "apathy",
                            Symptom5 = "personality changes"
                        },
                        new
                        {
                            DiseaseID = 3L,
                            DiseaseName = "Rhinovirus",
                            DiseaseType = "Viral infection",
                            RiskFactor = "Low",
                            Symptom1 = "nasal dryness or irritation",
                            Symptom2 = "sore throat",
                            Symptom3 = "headache",
                            Symptom4 = "facial and ear pressure",
                            Symptom5 = "low-grade fever"
                        },
                        new
                        {
                            DiseaseID = 4L,
                            DiseaseName = "Conjunctivitis",
                            DiseaseType = "Infection",
                            RiskFactor = "Medium",
                            Symptom1 = "pink or red color in the white of the eye",
                            Symptom2 = "swelling of the conjunctiva",
                            Symptom3 = "increased tear production",
                            Symptom4 = "feeling like a foreign body is in the eye",
                            Symptom5 = "urge to rub the eye"
                        });
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Models.Pacient", b =>
                {
                    b.Property<long>("PacientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<bool>("Insurance")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("UnderlyingConditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacientID");

                    b.ToTable("Pacients");

                    b.HasData(
                        new
                        {
                            PacientID = 1L,
                            DateOfBirth = new DateTime(1997, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bogdan",
                            Insurance = true,
                            LastName = "Cojocaru",
                            UnderlyingConditions = "none"
                        },
                        new
                        {
                            PacientID = 2L,
                            DateOfBirth = new DateTime(1997, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Victor",
                            Insurance = true,
                            LastName = "Popescu",
                            UnderlyingConditions = "Asthma"
                        },
                        new
                        {
                            PacientID = 3L,
                            DateOfBirth = new DateTime(1965, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ionut",
                            Insurance = false,
                            LastName = "Roman",
                            UnderlyingConditions = "Diabetes"
                        },
                        new
                        {
                            PacientID = 4L,
                            DateOfBirth = new DateTime(1998, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Maria",
                            Insurance = true,
                            LastName = "Fasie",
                            UnderlyingConditions = "none"
                        });
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Models.Treatment", b =>
                {
                    b.Property<long>("TreatmentID")
                        .HasColumnType("bigint");

                    b.Property<string>("DiseaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentID");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            TreatmentID = 1L,
                            DiseaseName = "Tuberculosis",
                            Medication = "Isoniazid, Rifampin, Ethambutol, Pyrazinamide",
                            StartDate = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TreatmentID = 2L,
                            DiseaseName = "Alzheimer",
                            Medication = "Cholinesterase inhibitors, Memantine",
                            StartDate = new DateTime(2021, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TreatmentID = 3L,
                            DiseaseName = "Rhinovirus",
                            Medication = "nonsteroidal anti-inflammatory drugs, antihistamines, and anticholinergic nasal solutions",
                            StartDate = new DateTime(2021, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TreatmentID = 4L,
                            DiseaseName = "Conjunctivitis",
                            Medication = "Bleph (sulfacetamide sodium), Moxeza (moxifloxacin), Zymar (gatifloxacin), Romycin (erythromycin)",
                            StartDate = new DateTime(2021, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SoftbinatorHealthcare.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SoftbinatorHealthcare.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftbinatorHealthcare.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SoftbinatorHealthcare.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Entities.DoctorPacient", b =>
                {
                    b.HasOne("SoftbinatorHealthcare.Entities.Doctor", "Doctor")
                        .WithMany("DoctorPacients")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftbinatorHealthcare.Models.Pacient", "Pacient")
                        .WithMany("DoctorPacients")
                        .HasForeignKey("PacientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftbinatorHealthcare.Models.Treatment", b =>
                {
                    b.HasOne("SoftbinatorHealthcare.Models.Disease", "Disease")
                        .WithOne("Treatment")
                        .HasForeignKey("SoftbinatorHealthcare.Models.Treatment", "TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
